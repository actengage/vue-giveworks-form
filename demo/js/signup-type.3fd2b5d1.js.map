{"version":3,"sources":["webpack:///./src/Components/Types/Signup.vue?2baa","webpack:///src/Components/Types/Signup.vue","webpack:///./src/Components/Types/Signup.vue?afc4","webpack:///./src/Components/Types/Signup.vue","webpack:///./src/Mixins/FormEvents.js","webpack:///./src/Mixins/PageType.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","page","options","service","split","pop","tag","attrs","submitting","form","errors","staticRenderFns","component","EVENTS","directives","bindEvents","bind","el","binding","vnode","context","subject","child","i","$on","args","method","camelCase","$emit","props","source","String","Number","redirect","Boolean","httpOptions","Object","type","required","mixins","FormEvents","computed","buttonLabel","button","shouldShowEmployment","site","methods","submitButton","$refs","submit","$el","querySelector","hideSubmitButton","style","display","showSubmitButton","disableSubmitButton","disabled","enableSubmitButton","handleRedirect","url","sessionid","setTimeout","next_page","replace","window","location","match","success","failed","blur","Promise","resolve","reject","Error","model","save","assign","then","response","isFunction","data","onSubmitSuccess","external_reply","get","onSubmitError","e","mounted","loaded","recurring","recurring_only","Page","id"],"mappings":"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","file":"js/signup-type.3fd2b5d1.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c(_vm.page.options.service.split('\\\\').pop(),{tag:\"component\",attrs:{\"submitting\":_vm.submitting,\"page\":_vm.page,\"form\":_vm.form,\"errors\":_vm.errors}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div>\n        <component :is=\"page.options.service.split('\\\\').pop()\" :submitting=\"submitting\" :page=\"page\" :form=\"form\" :errors=\"errors\" />\n    </div>\n</template>\n\n<script>\nimport PageType from '../../Mixins/PageType';\nexport default {\n\n    name: 'PageTypeSignup',\n\n    extends: PageType,\n\n    components: {\n        GoToWebinar: import(/* webpackChunkName: \"go-to-webinar\" */'../Signups/GoToWebinar')\n    }\n\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signup.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signup.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Signup.vue?vue&type=template&id=3cc7899d&\"\nimport script from \"./Signup.vue?vue&type=script&lang=js&\"\nexport * from \"./Signup.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { camelCase } from 'vue-interface/src/Helpers/Functions';\n\nconst EVENTS = [\n    'submit',\n    'redirect',\n    'submit-enable',\n    'submit-disable',\n    'submit-show',\n    'submit-hide'\n];\n\nexport default {\n\n    directives: {\n        bindEvents: {\n            bind(el, binding, vnode) {\n                const context = vnode.context;\n                const subject = vnode.child || vnode.context;\n\n                for(const i in EVENTS) {\n                    subject.$on(EVENTS[i], (...args) => {\n                        const method = camelCase('on-' + EVENTS[i]);\n\n                        if(subject !== context) {\n                            context.$emit(EVENTS[i], ...args);\n                        }\n\n                        if(context[method]) {\n                            context[method](...args);\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n};\n","import Page from '../Models/Page';\nimport FormEvents from './FormEvents';\nimport { isFunction } from 'vue-interface/src/Helpers/Functions';\n\nexport default {\n\n    props: {\n\n        source: [String, Number],\n\n        redirect: [Boolean, String],\n\n        httpOptions: Object,\n\n        page: {\n            type: Object,\n            required: true\n        }\n\n    },\n\n    mixins: [\n        FormEvents\n    ],\n\n    computed: {\n\n        buttonLabel() {\n            return this.page.options.button;\n        },\n\n        shouldShowEmployment() {\n            return this.page.site.type === 'PAC' || this.page.site.type === 'Campaign';\n        }\n\n    },\n\n    methods: {\n\n        submitButton() {\n            return this.$refs.submit ? this.$refs.submit.$el : this.$el.querySelector('[type=submit]');\n        },\n\n        hideSubmitButton() {\n            this.submitButton().style.display = 'none';\n        },\n\n        showSubmitButton() {\n            this.submitButton().style.display = 'block';\n        },\n\n        disableSubmitButton() {\n            this.submitButton().disabled = true;\n        },\n\n        enableSubmitButton() {\n            this.submitButton().disabled = false;\n        },\n\n        handleRedirect(url, sessionid) {\n            setTimeout(() => {\n                if(!url && this.page.next_page) {\n                    url = this.page.next_page.url.replace(/\\/$/, '') + (\n                        this.form.source ? '/' + this.form.source : ''\n                    );\n                }\n                \n                if(url) {\n                    window.location = url + (sessionid && (url.match(/\\?/) ? '&' : '?') + `sessionid=${sessionid}`);\n                }\n            });\n        },\n\n        submit(success, failed) {\n            if(this.$el.querySelector(':focus')) {\n                this.$el.querySelector(':focus').blur();\n            }\n\n            return new Promise((resolve, reject) => {\n                if(!this.submitting) {\n                    this.errors = {};\n                    this.submitting = true;\n                    this.$emit('submit');\n                    this.model.save(this.form, Object.assign({\n                        method: 'post'\n                    }, this.httpOptions))\n                        .then(response => {\n                            this.submitting = false;\n                            this.$emit('submit-complete', true, response);\n                            this.$emit('submit-success', response);\n\n                            if(isFunction(success)) {\n                                success(response);\n                            }\n\n                            resolve(response);\n                        }, response => {\n                            this.submitting = false;\n                            this.errors = response.data.errors;\n                            this.$emit('submit-complete', true, response);\n                            this.$emit('submit-success', response);\n\n                            if(isFunction(failed)) {\n                                failed(response);\n                            }\n\n                            reject(response);\n                        });\n                }\n                else {\n                    reject(new Error('The form is already submitting'));\n                }\n            });\n        },\n\n        onSubmitSuccess(page) {\n            this.handleRedirect(this.redirect || this.page.external_reply, page.get('sessionid'));\n        },\n\n        onSubmitError(e) {\n            throw e;\n        }\n\n    },\n\n    mounted() {\n        this.loaded = true;\n    },\n\n    data() {\n        const recurring = this.page.site.recurring ? (\n            this.page.options.recurring_only ? 1 : 0\n        ) : 0;\n        \n        return {\n            form: {\n                source: this.source,\n                recurring: recurring\n            },\n            errors: {},\n            loaded: false,\n            submitting: false,\n            model: new Page({\n                id: this.page.id\n            })\n        };\n    }\n\n};\n"],"sourceRoot":""}