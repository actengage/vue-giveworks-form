{"version":3,"sources":["webpack://GiveworksForm/./node_modules/@bugsnag/plugin-vue/dist/bugsnag-vue.js"],"names":[],"mappings":";;;;;AAAA,aAAa,GAAG,IAAsD,EAAE,mBAAmB,KAAK,UAAqO,CAAC,aAAa;AACnV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA,CAAC;AACD","file":"GiveworksForm.common.13.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.bugsnag__vue = f()}})(function(){var define,module,exports;\nvar _$src_1 = {};\nvar _this = this;\n\n_$src_1 = {\n  name: 'vue',\n  init: function (client, Vue) {\n    if (Vue === void 0) {\n      Vue = window.Vue;\n    }\n\n    if (!Vue) throw new Error('cannot find Vue');\n    var prev = Vue.config.errorHandler;\n\n    var handler = function (err, vm, info) {\n      var handledState = {\n        severity: 'error',\n        unhandled: true,\n        severityReason: {\n          type: 'unhandledException'\n        }\n      };\n      var report = new client.BugsnagReport(err.name, err.message, client.BugsnagReport.getStacktrace(err), handledState, err);\n      report.updateMetaData('vue', {\n        errorInfo: info,\n        component: vm ? formatComponentName(vm, true) : undefined,\n        props: vm ? vm.$options.propsData : undefined\n      });\n      client.notify(report);\n      if (typeof console !== 'undefined' && typeof console.error === 'function') console.error(err);\n      if (typeof prev === 'function') prev.call(_this, err, vm, info);\n    };\n\n    Vue.config.errorHandler = handler;\n    return null;\n  } // taken and reworked from Vue.js source\n\n};\n\nvar formatComponentName = function (vm, includeFile) {\n  if (vm.$root === vm) return '<Root>';\n  var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};\n  var name = options.name || options._componentTag;\n  var file = options.__file;\n\n  if (!name && file) {\n    var match = file.match(/([^/\\\\]+)\\.vue$/);\n    name = match && match[1];\n  }\n\n  return (name ? '<' + classify(name) + '>' : '<Anonymous>') + (file && includeFile !== false ? ' at ' + file : '');\n}; // taken and reworked from Vue.js source\n\n\nvar classify = _$src_1.classify = function (str) {\n  return str.replace(/(?:^|[-_])(\\w)/g, function (c) {\n    return c.toUpperCase();\n  }).replace(/[-_]/g, '');\n};\n\nreturn _$src_1;\n\n});\n//# sourceMappingURL=bugsnag-vue.js.map\n"],"sourceRoot":""}